name: CI (pnpm + Next + Vercel)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

# Valorile vin din Settings → Secrets and variables → Actions
env:
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Enable pnpm (Corepack)
        run: |
          corepack enable
          corepack prepare pnpm@10.15.0 --activate
      - name: Install deps
        run: pnpm install --frozen-lockfile=false
      - name: Lint
        run: pnpm run lint

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Enable pnpm (Corepack)
        run: |
          corepack enable
          corepack prepare pnpm@10.15.0 --activate
      - name: Install deps
        run: pnpm install --frozen-lockfile=false
      - name: Tests
        run: echo "noop (no tests yet)"

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Enable pnpm (Corepack)
        run: |
          corepack enable
          corepack prepare pnpm@10.15.0 --activate
      - name: Install deps
        run: pnpm install --frozen-lockfile=false

      # 1) „Vercel pull” ca să existe .vercel/project.json și env. Non-interactiv.
      - name: Vercel pull (configure project)
        run: npx -y vercel@latest pull --yes --environment=production --token "${{ env.VERCEL_TOKEN }}"

      # 2) „Vercel build” produce .vercel/output
      - name: Build with Vercel (prebuild)
        run: npx -y vercel@latest build --token "${{ env.VERCEL_TOKEN }}"

      # 3) Împachetăm .vercel/output ca artifact
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: .vercel/output
          if-no-files-found: error

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # 1) Descărcăm artifactul exact în .vercel/output
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-build
          path: .vercel/output

      # 2) Deploy „prebuilt” — FORȚĂM non-interactiv cu --yes și trecem tokenul
      - name: Vercel deploy (prebuilt)
        run: npx -y vercel@latest deploy --prebuilt --prod --yes --token "${{ env.VERCEL_TOKEN }}"
        env:
          VERCEL_ORG_ID: ${{ env.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ env.VERCEL_PROJECT_ID }}
