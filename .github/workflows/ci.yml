name: CI (pnpm + Next + Vercel)

on:
  push:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with: { version: 9 }
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: 'pnpm' }
      - run: pnpm install --frozen-lockfile
      - run: pnpm lint

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with: { version: 9 }
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: 'pnpm' }
      - run: pnpm install --frozen-lockfile
      - run: pnpm test -- --watch=false

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with: { version: 9 }
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: 'pnpm' }
      - run: pnpm install --frozen-lockfile

      # Leagă proiectul (creează .vercel/project.json)
      - name: Link Vercel project
        run: npx vercel@latest pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      # Construiește artefactul .vercel/output
      - name: Build with Vercel
        run: npx vercel@latest build --prod --token=${{ secrets.VERCEL_TOKEN }}

      # Urcă .vercel/output ca artifact
      - name: Upload Vercel build output
        uses: actions/upload-artifact@v4
        with:
          name: vercel-output
          path: .vercel/output

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      # Descarcă artefactul în .vercel/output
      - name: Download Vercel build output
        uses: actions/download-artifact@v4
        with:
          name: vercel-output
          path: .vercel/output

      # Deploy folosind artefactul prebuilt
      - name: Deploy to Vercel (prebuilt)
        run: npx vercel@latest deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
