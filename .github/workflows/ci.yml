name: CI (pnpm + Next + Vercel)

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
      - run: pnpm install --frozen-lockfile
      - run: pnpm run lint

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
      - run: pnpm install --frozen-lockfile
      - run: pnpm test --if-present

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
      - run: pnpm install --frozen-lockfile

      # Leagă repo-ul la proiectul Vercel și adu env-urile (prod)
      - run: npx vercel@latest pull --yes --environment=production --token="$VERCEL_TOKEN"

      # GENEREAZĂ .vercel/output (ăsta lipsa la tine)
      - run: npx vercel@latest build --prod

      # Publicăm doar .vercel/output pentru jobul de deploy
      - uses: actions/upload-artifact@v4
        with:
          name: vercel-output
          path: .vercel/output

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: vercel-output
          path: .vercel/output

      # Deploy din output-ul preconstruit
      - run: npx vercel@latest deploy --prebuilt --prod --token="$VERCEL_TOKEN"
