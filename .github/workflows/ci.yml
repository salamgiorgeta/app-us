name: CI (pnpm + Next + Vercel)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: Enable pnpm (Corepack)
        run: |
          corepack enable
          corepack prepare pnpm@10.15.0 --activate
      - name: Install deps
        run: pnpm install --frozen-lockfile=false
      - name: Lint
        run: pnpm run lint

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: Enable pnpm (Corepack)
        run: |
          corepack enable
          corepack prepare pnpm@10.15.0 --activate
      - name: Install deps
        run: pnpm install --frozen-lockfile=false
      - name: Tests
        run: echo "noop (no tests yet)"

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: Enable pnpm (Corepack)
        run: |
          corepack enable
          corepack prepare pnpm@10.15.0 --activate
      - name: Install deps
        run: pnpm install --frozen-lockfile=false

      # Leagă repo de proiectul Vercel (creează .vercel/project.json)
      - name: Vercel pull (configure project)
        run: npx -y vercel@latest pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      # Build local (opțional, dar util pt. a verifica next build)
      - name: Build (Next.js)
        run: pnpm run build

      # Prebuild Vercel -> produce .vercel/output
      - name: Vercel build (prebuild)
        run: npx -y vercel@latest build --prod --token=${{ secrets.VERCEL_TOKEN }}

      # Împachetăm output-ul corect
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: .vercel/output

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-build
          path: .vercel/output
      # Creează din nou .vercel/project.json în jobul de deploy
      - name: Vercel pull (configure project)
        run: npx -y vercel@latest pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      - name: Vercel deploy (prebuilt)
        run: npx -y vercel@latest deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
