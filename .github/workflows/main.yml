name: CI (pnpm + Next + Vercel)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# prevenim rulari paralele pe aceeasi ramura
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: false

env:
  CI: true
  NEXT_TELEMETRY_DISABLED: "1"

jobs:
  # ---- bloc comun de setup, repetat in fiecare job ----
  # (nu folosim ancore YAML ca sa ramana clar/compatibil cu UI-ul GitHub)
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js + cache pnpm
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Enable Corepack & pnpm v9
        run: |
          corepack enable
          corepack prepare pnpm@9.15.4 --activate
          pnpm -v
          node -v

      # (optional) cache node_modules â€“ util daca ai multe deps de CI
      - name: Cache node_modules (optional)
        uses: actions/cache@v4
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-nm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-nm-

      - name: Install deps
        run: pnpm install --no-frozen-lockfile

      - name: Lint
        run: pnpm lint

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js + cache pnpm
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Enable Corepack & pnpm v9
        run: |
          corepack enable
          corepack prepare pnpm@9.15.4 --activate
          pnpm -v

      - name: Cache node_modules (optional)
        uses: actions/cache@v4
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-nm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-nm-

      - name: Install deps
        run: pnpm install --no-frozen-lockfile

      - name: Test
        run: pnpm test --if-present

  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js + cache pnpm
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Enable Corepack & pnpm v9
        run: |
          corepack enable
          corepack prepare pnpm@9.15.4 --activate
          pnpm -v

      - name: Cache node_modules (optional)
        uses: actions/cache@v4
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-nm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-nm-

      - name: Install deps
        run: pnpm install --no-frozen-lockfile

      - name: Next build (local)
        run: pnpm build

      # ---- pregatim artifactul prebuilt pentru Vercel ----
      - name: Pull Vercel project settings
        run: |
          pnpm dlx vercel@latest pull --yes --environment=production \
            --token=${{ secrets.VERCEL_TOKEN }}

      - name: Vercel prebuild (.vercel/output)
        run: pnpm dlx vercel@latest build

      - name: Upload build artifact (Vercel prebuilt)
        uses: actions/upload-artifact@v4
        with:
          name: vercel-prebuilt
          path: |
            .vercel/**
            .next/**
          retention-days: 5

  deploy-vercel:
    name: Deploy (Vercel prebuilt)
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Download prebuilt artifact
        uses: actions/download-artifact@v4
        with:
          name: vercel-prebuilt
          path: .

      - name: Debug artifact (optional)
        run: |
          ls -la
          ls -la .vercel || true
          ls -la .vercel/output || true

      - name: Deploy to Vercel (production, prebuilt)
        run: |
          pnpm dlx vercel@latest deploy --prebuilt --prod \
            --token=${{ secrets.VERCEL_TOKEN }}
